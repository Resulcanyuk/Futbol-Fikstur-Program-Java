
import java.awt.List;
import static java.lang.Math.random;
import static java.lang.StrictMath.random;
import java.util.Random;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Resul
 */
public class Fikstur extends javax.swing.JFrame {
        private String[][] takimlar;
    private int takimSayisi;
     private String baslik []={"Takımlar","G","B","M","AG","YG","A","P"};
     private DefaultTableModel tableModel;
     private String baslik2 []={"Hafta","Ev Sahibi","Deplasman","Deplasman Gol Sayısı","Ev Sahibi Gol Sayısı"};
     private DefaultTableModel tableModel2;

    public Fikstur(String[][] takimlar, int takimSayisi) {
        initComponents();  
        this.takimlar = takimlar;
        this.takimSayisi = takimSayisi;
        tableModel = new DefaultTableModel(takimlar, baslik);
        fiksturtable.setModel(tableModel);
        
        tableModel2= new DefaultTableModel(takimlar,baslik2);
        karsilasmatable.setModel(tableModel2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fiksturtable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        karsilasmatable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        fiksturtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(fiksturtable);

        karsilasmatable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(karsilasmatable);

        jButton1.setText("Fikstür Oluştur");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Puan Hesapla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addGap(61, 61, 61)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
      tableModel2.setRowCount(0);
      tableModel.setRowCount(0);
     
    }//GEN-LAST:event_formWindowActivated

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 
 int haftaSayisi = (takimSayisi - 1) * 2; //Hafta sayısını kontrol etmek için girilen takım sayısından 1 çıkartıp 2 le çarparak hafta sayısını bulur
int maclarPerHafta = takimSayisi / 2; //Hafta başına düşen maç sayısını hesaplamak için girilen takım sayısını 2 ye böler
int karsilasmaSayisi = haftaSayisi * maclarPerHafta; //Toplam maç sayısını hesaplamak için hafta sayısıyla hafta başına düşen maç sayısını çarpar
String[][] karsilasmalar = new String[karsilasmaSayisi][haftaSayisi + 1];// iki boyutlu bir dizi oluşturur karşılaşmaları ve haftaları temsil eder
ArrayList<String[]> takimListesi = new ArrayList<>(Arrays.asList(takimlar)); //takimListesi adında bir arraylist oluşturur bu array listte takimların listesini tutar
Collections.shuffle(takimListesi);// shuffle koduyla takimListesindeki takımları karıştırır 
int hafta = 1;
int omacsayisi = 0;
Set<String> omac = new HashSet<>();//benzersiz karşılaşmalar oluşturmak için set komutunu kullanılır


while(omacsayisi < karsilasmaSayisi)/*oynanan maç sayısı toplam maç sayısından küçükse döngü devam eder*/ {
    Collections.shuffle(takimListesi);//shuffle komutuyla takımları karıştırır
    omac.clear();//clear koduyla hashset kümesini temizler içindeki elemanlar kaldırılır
    for (int i = 0; i < maclarPerHafta; i++)/*for döngüsü açar ve sıfırdan başlatır hafta başına düşen maç sayısından küçük olduğu sürece devam eder */ {
       String evSahibi = takimListesi.get(i)[0];// takimListesi listesinden i indeksine karşılık gelen takımın adını evSahibi alır.
        String deplasman = takimListesi.get(i + maclarPerHafta)[0]; //takimListesi listesinden i + maclarPerHafta indeksine karşılık gelen takımın adını deplasman alır. Bu, ev sahibi takımın karşılaşacağı deplasman takımını belirlemek için kullanılır.
        String matchKey = evSahibi + "-" + deplasman; // evSahibi ve deplasman takımlarının adlarını birleştirerek bir maç anahtarı (matchKey) oluşturur. Bu kodoluşturulan maçları benzersiz şekilde tanımlamak için kullanılır.
        Random rand = new Random(); // random skorlar üretmek için rnd adında random üretilir
        if (!omac.contains(matchKey))/*Daha önce oluşturulan maçları kontrol eder ve aynı eşleşme yoksa yeni bir maç oluşturur*/ {   
             int evSahibiGol = rand.nextInt(5); //evSahibiGol ve deplasmangol değişkenine 0 ve 4 arasında rastgele bir skor oluşturur
             int deplasmanGol = rand.nextInt(5);                                         // 4 dahil
        String[] karsilasma = {Integer.toString(hafta), evSahibi, deplasman, Integer.toString(evSahibiGol), Integer.toString(deplasmanGol)};
        //karsilasma adında bir dizi oluşturup  maç bilgileri (hafta, evSahibi, deplasman, evSahibiGol, deplasmanGol) bilgileri bu diziye  kaydedilir.
        karsilasmalar[omacsayisi] = karsilasma;// karsilasmalar dizisine oluşturulan maç bilgileri eklenir. omacsayisi değişkeni, kaçıncı maç olduğunu kontrol için kullandım.
            omac.add(matchKey); //oluşturulan karşılaşmalar omac kümesine eklenir böylede daha önce böyle bir karşılaşma olup olmadığını kontrol edebiliriz
            omacsayisi++; //oynanan maç sayısı 1 arttırılır     
        }  else {   
            Collections.shuffle(takimListesi);
            i--; 
            //else içinde ise daha önce karşılaşma oluşturulduysa i yi 1 eksiltip döngünün içine geri gidip yeni karşılaşma oluşturulur
        }  
    }
    hafta++; //haftayı 1 arttırır
}
tableModel2.setRowCount(0);
for (String[] karsilasma : karsilasmalar) {
    if (karsilasma != null) {
        tableModel2.addRow(karsilasma); //Burada karsilasmalar dizisindeki maç bilgilerini tabloya ekleyerek, fikstür tablosunun günceller.
    }
}
    }//GEN-LAST:event_jButton1ActionPerformed
     
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 
        if (tableModel2.getRowCount() == 0) {
        JOptionPane.showMessageDialog(null, "Lütfen puan hesaplamadan önce fikstür oluşturun.", "Uyarı", JOptionPane.WARNING_MESSAGE);
        return;
        }
        else{
             int rowCount = tableModel2.getRowCount();
HashMap<String, int[]> takimPuanlari = new HashMap<>();
for (int i = 0; i < rowCount; i++) {//tableModel2 tablosunun her bir satırı için döngü oluşturur.
    String evSahibi = (String) tableModel2.getValueAt(i, 1);//tableModel2 tablosundaki i indeksli satırın 1. sütunundaki değeri (evSahibi takımının adını) alır.
    String deplasman = (String) tableModel2.getValueAt(i, 2);                                          // 2.sütunundaki değeri (deplasman takımının adını) alır.
    int evSahibiGol = Integer.parseInt((String) tableModel2.getValueAt(i, 4));//4.sutundaki değeri(ev sahibi  takımının attığı gol sayısı) alır.
    int deplasmanGol = Integer.parseInt((String) tableModel2.getValueAt(i, 3));//3.sutundaki değeri(deplasman takımının attığı gol sayısı) alır.

    int[] evSahibiPuanlar = takimPuanlari.getOrDefault(evSahibi, new int[8]);
    //takimPuanlari adlı HashMapden evSahibi takımının puanlarını alır eğer evSahibi takımı takimPuanlari HashMapinde bulunmazsa  varsayılan olarak tüm puanları sıfır olan yeni bir 8 elemanlı dizi oluşturulur.
    if (evSahibiPuanlar == null) {
        evSahibiPuanlar = new int[]{0, 0, 0, 0, 0, 0, 0,0,0};
        //evSahibi Puanları null ise yani daha önce puanlanmadıysa dizinin tüm puanları sıfır oalrak diziye başlatır
    }
    int[] deplasmanPuanlar = takimPuanlari.getOrDefault(deplasman, new int[8]);//yukarıdaki kodun aynısını deplasman puanları için yapıyor
    if (deplasmanPuanlar == null) {
        deplasmanPuanlar = new int[]{0, 0, 0, 0, 0, 0, 0,0,0};
    }

    evSahibiPuanlar[0]++; // Oynanan maç sayısı
    deplasmanPuanlar[0]++; // Oynanan maç sayısı4

    if (evSahibiGol > deplasmanGol) {
        evSahibiPuanlar[1]++; // Galibiyet
        evSahibiPuanlar[6] += 3; // Puan
        deplasmanPuanlar[3]++; // Mağlubiyet
    } else if (evSahibiGol < deplasmanGol) {
        deplasmanPuanlar[1]++; // Galibiyet
        deplasmanPuanlar[6] += 3; // Puan
        evSahibiPuanlar[3]++; // Mağlubiyet
    } else {
        evSahibiPuanlar[2]++; // Beraberlik
        evSahibiPuanlar[6] += 1; // Puan
        deplasmanPuanlar[2]++; // Beraberlik
        deplasmanPuanlar[6] += 1; // Puan
    }

    evSahibiPuanlar[4] += evSahibiGol; // Attığı gol
    evSahibiPuanlar[5] += deplasmanGol; // Yediği gol
    evSahibiPuanlar[6] += (evSahibiGol - deplasmanGol); // Averaj

    deplasmanPuanlar[4] += deplasmanGol; // Attığı gol
    deplasmanPuanlar[5] += evSahibiGol; // Yediği gol
    deplasmanPuanlar[6] += (deplasmanGol - evSahibiGol); // Averaj

    takimPuanlari.put(evSahibi, evSahibiPuanlar);
    takimPuanlari.put(deplasman, deplasmanPuanlar);
}

DefaultTableModel tableModel = (DefaultTableModel) fiksturtable.getModel();
tableModel.setRowCount(0);

for (String takim : takimPuanlari.keySet()) {
    int[] puanlar = takimPuanlari.get(takim); // İlgili takımın puanlarını al
    if (puanlar == null) {
        puanlar = new int[]{0, 0, 0, 0, 0, 0, 0,0};
    }
    puanlar[7] = puanlar[1] * 3 + puanlar[2]; // Puan hesabı yapılır
    puanlar[6]=puanlar[4]-puanlar[5];//Averaj hesabı yapılır
    Object[] row = new Object[]{
        takim,
        puanlar[1], // Galibiyet
        puanlar[2], // Beraberlik
        puanlar[3], // Mağlubiyet
        puanlar[4], // Attığı gol
        puanlar[5], // Yediği gol
        puanlar[6], //Averaj
        puanlar[7],// Puan
    };
    tableModel.addRow(row);
}
ArrayList<Map.Entry<String, int[]>> sortedTeams = new ArrayList<>(takimPuanlari.entrySet());
sortedTeams.sort((team1, team2) ->
{
    int[] puanlar1 = team1.getValue();
    int[] puanlar2 = team2.getValue();
    int puan1 = puanlar1[7]; // Takım 1'in puanı
    int puan2 = puanlar2[7]; // Takım 2'nin puanı
    return Integer.compare(puan2, puan1); // Büyükten küçüğe sıralama
});
        
        
fiksturtable.setModel(tableModel);
    sortedTeams.sort((team1, team2) -> {
    int[] puanlar1 = team1.getValue();
    int[] puanlar2 = team2.getValue();
    int puan1 = puanlar1[7]; // Takım 1'in puanı
    int puan2 = puanlar2[7]; // Takım 2'nin puanı
    return Integer.compare(puan2, puan1); // Büyükten küçüğe sıralama
});

// Sıralanmış takımları yeni bir tablo modeline ekleyerek fiksturtable'ı günceller
DefaultTableModel sıralitablo = new DefaultTableModel();
sıralitablo.addColumn("Takım");
sıralitablo.addColumn("Galibiyet");
sıralitablo.addColumn("Beraberlik");
sıralitablo.addColumn("Mağlubiyet");
sıralitablo.addColumn("Attığı Gol");
sıralitablo.addColumn("Yediği Gol");
sıralitablo.addColumn("Averaj");
sıralitablo.addColumn("Puan");

for (Map.Entry<String, int[]> entry : sortedTeams) {
    String takim = entry.getKey();
    int[] puanlar = entry.getValue();
    Object[] row = new Object[]{
        takim,
        puanlar[1], // Galibiyet
        puanlar[2], // Beraberlik
        puanlar[3], // Mağlubiyet
        puanlar[4], // Attığı gol
        puanlar[5], // Yediği gol
        puanlar[6], // Averaj
        puanlar[7]  // Puan
    };
    sıralitablo.addRow(row);
}

fiksturtable.setModel(sıralitablo);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String takimlar[][],int takimsayisi) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fikstur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fikstur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fikstur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fikstur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fikstur(takimlar,takimsayisi).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable fiksturtable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable karsilasmatable;
    // End of variables declaration//GEN-END:variables
}
